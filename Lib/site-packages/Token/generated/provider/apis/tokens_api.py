# coding: utf-8

"""
TokensApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class TokensApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_payment_route(self, token_id, request, **kwargs):
        """
        Create payment
        Create a payment.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_payment_route(token_id, request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str token_id: Unique id for a token. (required)
        :param CreatePaymentRequest request:  (required)
        :param str authorization: Authorization scheme and credentials.
        :return: CreatePaymentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token_id', 'request', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_payment_route" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'token_id' is set
        if ('token_id' not in params) or (params['token_id'] is None):
            raise ValueError("Missing the required parameter `token_id` when calling `create_payment_route`")
        # verify the required parameter 'request' is set
        if ('request' not in params) or (params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `create_payment_route`")

        resource_path = '/tokens/{tokenId}/payments'.replace('{format}', 'json')
        path_params = {}
        if 'token_id' in params:
            path_params['tokenId'] = params['token_id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreatePaymentResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_token_route(self, request, **kwargs):
        """
        Create token
        Create a token with a payer/payee alias.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_token_route(request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CreateTokenRequest request:  (required)
        :param str authorization: Authorization scheme and credentials.
        :return: CreateTokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_token_route" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'request' is set
        if ('request' not in params) or (params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `create_token_route`")

        resource_path = '/tokens'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateTokenResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def decline_token_route(self, token_id, **kwargs):
        """
        Decline token
        Decline a token.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.decline_token_route(token_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str token_id: Unique id for a token. (required)
        :param str authorization: Authorization scheme and credentials.
        :return: Function1RequestContextBoxedUnit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token_id', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method decline_token_route" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'token_id' is set
        if ('token_id' not in params) or (params['token_id'] is None):
            raise ValueError("Missing the required parameter `token_id` when calling `decline_token_route`")

        resource_path = '/tokens/{tokenId}/decline'.replace('{format}', 'json')
        path_params = {}
        if 'token_id' in params:
            path_params['tokenId'] = params['token_id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Function1RequestContextBoxedUnit',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def endorse_token_route(self, token_id, request, **kwargs):
        """
        Endorse token
        Payer endorses a token with one of payer's accounts.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.endorse_token_route(token_id, request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str token_id: Unique id for a token. (required)
        :param EndorseTokenRequest request:  (required)
        :param str authorization: Authorization scheme and credentials.
        :return: Function1RequestContextBoxedUnit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token_id', 'request', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endorse_token_route" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'token_id' is set
        if ('token_id' not in params) or (params['token_id'] is None):
            raise ValueError("Missing the required parameter `token_id` when calling `endorse_token_route`")
        # verify the required parameter 'request' is set
        if ('request' not in params) or (params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `endorse_token_route`")

        resource_path = '/tokens/{tokenId}/endorse'.replace('{format}', 'json')
        path_params = {}
        if 'token_id' in params:
            path_params['tokenId'] = params['token_id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Function1RequestContextBoxedUnit',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_payments_route(self, page_offset, page_limit, token_id, **kwargs):
        """
        Get payments
        Get payments for a token

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_payments_route(page_offset, page_limit, token_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page_offset: Offset for the page. The number of rows to skip from the selected sequence. (required)
        :param int page_limit: Limit for the page. The maximum number of rows to take from the selected sequence. (required)
        :param str token_id: Unique id for a token. (required)
        :param str authorization: Authorization scheme and credentials.
        :return: GetPaymentsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_offset', 'page_limit', 'token_id', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payments_route" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'page_offset' is set
        if ('page_offset' not in params) or (params['page_offset'] is None):
            raise ValueError("Missing the required parameter `page_offset` when calling `get_payments_route`")
        # verify the required parameter 'page_limit' is set
        if ('page_limit' not in params) or (params['page_limit'] is None):
            raise ValueError("Missing the required parameter `page_limit` when calling `get_payments_route`")
        # verify the required parameter 'token_id' is set
        if ('token_id' not in params) or (params['token_id'] is None):
            raise ValueError("Missing the required parameter `token_id` when calling `get_payments_route`")

        resource_path = '/tokens/{tokenId}/payments'.replace('{format}', 'json')
        path_params = {}
        if 'token_id' in params:
            path_params['tokenId'] = params['token_id']

        query_params = {}
        if 'page_offset' in params:
            query_params['pageOffset'] = params['page_offset']
        if 'page_limit' in params:
            query_params['pageLimit'] = params['page_limit']

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='GetPaymentsResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_token_route(self, token_id, **kwargs):
        """
        Get token
        Retrieve an token.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_token_route(token_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str token_id: Unique id for a token. (required)
        :param str authorization: Authorization scheme and credentials.
        :return: GetTokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token_id', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_token_route" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'token_id' is set
        if ('token_id' not in params) or (params['token_id'] is None):
            raise ValueError("Missing the required parameter `token_id` when calling `get_token_route`")

        resource_path = '/tokens/{tokenId}'.replace('{format}', 'json')
        path_params = {}
        if 'token_id' in params:
            path_params['tokenId'] = params['token_id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='GetTokenResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_tokens_route(self, page_offset, page_limit, **kwargs):
        """
        Get tokens
        Retrieve a list of tokens.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_tokens_route(page_offset, page_limit, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page_offset: Offset for the page. The number of rows to skip from the selected sequence. (required)
        :param int page_limit: Limit for the page. The maximum number of rows to take from the selected sequence. (required)
        :param str authorization: Authorization scheme and credentials.
        :return: GetTokensResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_offset', 'page_limit', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tokens_route" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'page_offset' is set
        if ('page_offset' not in params) or (params['page_offset'] is None):
            raise ValueError("Missing the required parameter `page_offset` when calling `get_tokens_route`")
        # verify the required parameter 'page_limit' is set
        if ('page_limit' not in params) or (params['page_limit'] is None):
            raise ValueError("Missing the required parameter `page_limit` when calling `get_tokens_route`")

        resource_path = '/tokens'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'page_offset' in params:
            query_params['pageOffset'] = params['page_offset']
        if 'page_limit' in params:
            query_params['pageLimit'] = params['page_limit']

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='GetTokensResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def register_token_route(self, token_id, request, **kwargs):
        """
        Register token
        Register a token.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.register_token_route(token_id, request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str token_id: Unique id for a token. (required)
        :param RegisterTokenRequest request:  (required)
        :param str authorization: Authorization scheme and credentials.
        :return: Function1RequestContextBoxedUnit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token_id', 'request', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method register_token_route" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'token_id' is set
        if ('token_id' not in params) or (params['token_id'] is None):
            raise ValueError("Missing the required parameter `token_id` when calling `register_token_route`")
        # verify the required parameter 'request' is set
        if ('request' not in params) or (params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `register_token_route`")

        resource_path = '/tokens/{tokenId}'.replace('{format}', 'json')
        path_params = {}
        if 'token_id' in params:
            path_params['tokenId'] = params['token_id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Function1RequestContextBoxedUnit',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def reject_token_route(self, token_id, **kwargs):
        """
        Reject token
        Reject a token.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.reject_token_route(token_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str token_id: Unique id for a token. (required)
        :param str authorization: Authorization scheme and credentials.
        :return: Function1RequestContextBoxedUnit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token_id', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reject_token_route" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'token_id' is set
        if ('token_id' not in params) or (params['token_id'] is None):
            raise ValueError("Missing the required parameter `token_id` when calling `reject_token_route`")

        resource_path = '/tokens/{tokenId}/reject'.replace('{format}', 'json')
        path_params = {}
        if 'token_id' in params:
            path_params['tokenId'] = params['token_id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Function1RequestContextBoxedUnit',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def revoke_token_route(self, token_id, **kwargs):
        """
        Revoke token
        Revoke a token.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.revoke_token_route(token_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str token_id: Unique id for a token. (required)
        :param str authorization: Authorization scheme and credentials.
        :return: Function1RequestContextBoxedUnit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token_id', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method revoke_token_route" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'token_id' is set
        if ('token_id' not in params) or (params['token_id'] is None):
            raise ValueError("Missing the required parameter `token_id` when calling `revoke_token_route`")

        resource_path = '/tokens/{tokenId}/revoke'.replace('{format}', 'json')
        path_params = {}
        if 'token_id' in params:
            path_params['tokenId'] = params['token_id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Function1RequestContextBoxedUnit',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
