# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Payment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Payment - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'payee_authority': 'Authority',
            'timestamp': 'datetime',
            'description': 'str',
            'amount': 'Money',
            'route': 'Route',
            'state': 'str',
            'transaction_id': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'payee_authority': 'payeeAuthority',
            'timestamp': 'timestamp',
            'description': 'description',
            'amount': 'amount',
            'route': 'route',
            'state': 'state',
            'transaction_id': 'transactionId'
        }

        self._id = None
        self._payee_authority = None
        self._timestamp = None
        self._description = None
        self._amount = None
        self._route = None
        self._state = None
        self._transaction_id = None

    @property
    def id(self):
        """
        Gets the id of this Payment.


        :return: The id of this Payment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Payment.


        :param id: The id of this Payment.
        :type: str
        """
        self._id = id

    @property
    def payee_authority(self):
        """
        Gets the payee_authority of this Payment.


        :return: The payee_authority of this Payment.
        :rtype: Authority
        """
        return self._payee_authority

    @payee_authority.setter
    def payee_authority(self, payee_authority):
        """
        Sets the payee_authority of this Payment.


        :param payee_authority: The payee_authority of this Payment.
        :type: Authority
        """
        self._payee_authority = payee_authority

    @property
    def timestamp(self):
        """
        Gets the timestamp of this Payment.


        :return: The timestamp of this Payment.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this Payment.


        :param timestamp: The timestamp of this Payment.
        :type: datetime
        """
        self._timestamp = timestamp

    @property
    def description(self):
        """
        Gets the description of this Payment.


        :return: The description of this Payment.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Payment.


        :param description: The description of this Payment.
        :type: str
        """
        self._description = description

    @property
    def amount(self):
        """
        Gets the amount of this Payment.


        :return: The amount of this Payment.
        :rtype: Money
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this Payment.


        :param amount: The amount of this Payment.
        :type: Money
        """
        self._amount = amount

    @property
    def route(self):
        """
        Gets the route of this Payment.


        :return: The route of this Payment.
        :rtype: Route
        """
        return self._route

    @route.setter
    def route(self, route):
        """
        Sets the route of this Payment.


        :param route: The route of this Payment.
        :type: Route
        """
        self._route = route

    @property
    def state(self):
        """
        Gets the state of this Payment.


        :return: The state of this Payment.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this Payment.


        :param state: The state of this Payment.
        :type: str
        """
        self._state = state

    @property
    def transaction_id(self):
        """
        Gets the transaction_id of this Payment.


        :return: The transaction_id of this Payment.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """
        Sets the transaction_id of this Payment.


        :param transaction_id: The transaction_id of this Payment.
        :type: str
        """
        self._transaction_id = transaction_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

