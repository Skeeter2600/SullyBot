# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Authority(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Authority - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'device_id': 'str',
            'account_id': 'str',
            'timestamp': 'datetime',
            'nonce': 'str',
            'signature': 'str'
        }

        self.attribute_map = {
            'device_id': 'deviceId',
            'account_id': 'accountId',
            'timestamp': 'timestamp',
            'nonce': 'nonce',
            'signature': 'signature'
        }

        self._device_id = None
        self._account_id = None
        self._timestamp = None
        self._nonce = None
        self._signature = None

    @property
    def device_id(self):
        """
        Gets the device_id of this Authority.


        :return: The device_id of this Authority.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """
        Sets the device_id of this Authority.


        :param device_id: The device_id of this Authority.
        :type: str
        """
        self._device_id = device_id

    @property
    def account_id(self):
        """
        Gets the account_id of this Authority.


        :return: The account_id of this Authority.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """
        Sets the account_id of this Authority.


        :param account_id: The account_id of this Authority.
        :type: str
        """
        self._account_id = account_id

    @property
    def timestamp(self):
        """
        Gets the timestamp of this Authority.


        :return: The timestamp of this Authority.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this Authority.


        :param timestamp: The timestamp of this Authority.
        :type: datetime
        """
        self._timestamp = timestamp

    @property
    def nonce(self):
        """
        Gets the nonce of this Authority.


        :return: The nonce of this Authority.
        :rtype: str
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """
        Sets the nonce of this Authority.


        :param nonce: The nonce of this Authority.
        :type: str
        """
        self._nonce = nonce

    @property
    def signature(self):
        """
        Gets the signature of this Authority.


        :return: The signature of this Authority.
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """
        Sets the signature of this Authority.


        :param signature: The signature of this Authority.
        :type: str
        """
        self._signature = signature

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

