# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class GetDeviceResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        GetDeviceResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'push_notification_id': 'str',
            'state': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'push_notification_id': 'pushNotificationId',
            'state': 'state'
        }

        self._name = None
        self._push_notification_id = None
        self._state = None

    @property
    def name(self):
        """
        Gets the name of this GetDeviceResponse.


        :return: The name of this GetDeviceResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this GetDeviceResponse.


        :param name: The name of this GetDeviceResponse.
        :type: str
        """
        self._name = name

    @property
    def push_notification_id(self):
        """
        Gets the push_notification_id of this GetDeviceResponse.


        :return: The push_notification_id of this GetDeviceResponse.
        :rtype: str
        """
        return self._push_notification_id

    @push_notification_id.setter
    def push_notification_id(self, push_notification_id):
        """
        Sets the push_notification_id of this GetDeviceResponse.


        :param push_notification_id: The push_notification_id of this GetDeviceResponse.
        :type: str
        """
        self._push_notification_id = push_notification_id

    @property
    def state(self):
        """
        Gets the state of this GetDeviceResponse.


        :return: The state of this GetDeviceResponse.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this GetDeviceResponse.


        :param state: The state of this GetDeviceResponse.
        :type: str
        """
        self._state = state

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

