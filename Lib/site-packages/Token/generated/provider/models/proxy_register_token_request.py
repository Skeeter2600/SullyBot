# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ProxyRegisterTokenRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ProxyRegisterTokenRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'payer_provider_code': 'str',
            'payer_member_id': 'str',
            'payer_authority': 'Authority',
            'payee_provider_code': 'str',
            'payee_member_id': 'str',
            'description': 'str',
            'terms': 'Terms'
        }

        self.attribute_map = {
            'payer_provider_code': 'payerProviderCode',
            'payer_member_id': 'payerMemberId',
            'payer_authority': 'payerAuthority',
            'payee_provider_code': 'payeeProviderCode',
            'payee_member_id': 'payeeMemberId',
            'description': 'description',
            'terms': 'terms'
        }

        self._payer_provider_code = None
        self._payer_member_id = None
        self._payer_authority = None
        self._payee_provider_code = None
        self._payee_member_id = None
        self._description = None
        self._terms = None

    @property
    def payer_provider_code(self):
        """
        Gets the payer_provider_code of this ProxyRegisterTokenRequest.


        :return: The payer_provider_code of this ProxyRegisterTokenRequest.
        :rtype: str
        """
        return self._payer_provider_code

    @payer_provider_code.setter
    def payer_provider_code(self, payer_provider_code):
        """
        Sets the payer_provider_code of this ProxyRegisterTokenRequest.


        :param payer_provider_code: The payer_provider_code of this ProxyRegisterTokenRequest.
        :type: str
        """
        self._payer_provider_code = payer_provider_code

    @property
    def payer_member_id(self):
        """
        Gets the payer_member_id of this ProxyRegisterTokenRequest.


        :return: The payer_member_id of this ProxyRegisterTokenRequest.
        :rtype: str
        """
        return self._payer_member_id

    @payer_member_id.setter
    def payer_member_id(self, payer_member_id):
        """
        Sets the payer_member_id of this ProxyRegisterTokenRequest.


        :param payer_member_id: The payer_member_id of this ProxyRegisterTokenRequest.
        :type: str
        """
        self._payer_member_id = payer_member_id

    @property
    def payer_authority(self):
        """
        Gets the payer_authority of this ProxyRegisterTokenRequest.


        :return: The payer_authority of this ProxyRegisterTokenRequest.
        :rtype: Authority
        """
        return self._payer_authority

    @payer_authority.setter
    def payer_authority(self, payer_authority):
        """
        Sets the payer_authority of this ProxyRegisterTokenRequest.


        :param payer_authority: The payer_authority of this ProxyRegisterTokenRequest.
        :type: Authority
        """
        self._payer_authority = payer_authority

    @property
    def payee_provider_code(self):
        """
        Gets the payee_provider_code of this ProxyRegisterTokenRequest.


        :return: The payee_provider_code of this ProxyRegisterTokenRequest.
        :rtype: str
        """
        return self._payee_provider_code

    @payee_provider_code.setter
    def payee_provider_code(self, payee_provider_code):
        """
        Sets the payee_provider_code of this ProxyRegisterTokenRequest.


        :param payee_provider_code: The payee_provider_code of this ProxyRegisterTokenRequest.
        :type: str
        """
        self._payee_provider_code = payee_provider_code

    @property
    def payee_member_id(self):
        """
        Gets the payee_member_id of this ProxyRegisterTokenRequest.


        :return: The payee_member_id of this ProxyRegisterTokenRequest.
        :rtype: str
        """
        return self._payee_member_id

    @payee_member_id.setter
    def payee_member_id(self, payee_member_id):
        """
        Sets the payee_member_id of this ProxyRegisterTokenRequest.


        :param payee_member_id: The payee_member_id of this ProxyRegisterTokenRequest.
        :type: str
        """
        self._payee_member_id = payee_member_id

    @property
    def description(self):
        """
        Gets the description of this ProxyRegisterTokenRequest.


        :return: The description of this ProxyRegisterTokenRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ProxyRegisterTokenRequest.


        :param description: The description of this ProxyRegisterTokenRequest.
        :type: str
        """
        self._description = description

    @property
    def terms(self):
        """
        Gets the terms of this ProxyRegisterTokenRequest.


        :return: The terms of this ProxyRegisterTokenRequest.
        :rtype: Terms
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """
        Sets the terms of this ProxyRegisterTokenRequest.


        :param terms: The terms of this ProxyRegisterTokenRequest.
        :type: Terms
        """
        self._terms = terms

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

