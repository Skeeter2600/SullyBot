# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class CreateTransferResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        CreateTransferResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'transaction_id': 'str',
            'timestamp': 'datetime',
            'state': 'str',
            'counterparty': 'CreateTransferResponseCounterparty'
        }

        self.attribute_map = {
            'id': 'id',
            'transaction_id': 'transactionId',
            'timestamp': 'timestamp',
            'state': 'state',
            'counterparty': 'counterparty'
        }

        self._id = None
        self._transaction_id = None
        self._timestamp = None
        self._state = None
        self._counterparty = None

    @property
    def id(self):
        """
        Gets the id of this CreateTransferResponse.


        :return: The id of this CreateTransferResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CreateTransferResponse.


        :param id: The id of this CreateTransferResponse.
        :type: str
        """
        self._id = id

    @property
    def transaction_id(self):
        """
        Gets the transaction_id of this CreateTransferResponse.


        :return: The transaction_id of this CreateTransferResponse.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """
        Sets the transaction_id of this CreateTransferResponse.


        :param transaction_id: The transaction_id of this CreateTransferResponse.
        :type: str
        """
        self._transaction_id = transaction_id

    @property
    def timestamp(self):
        """
        Gets the timestamp of this CreateTransferResponse.


        :return: The timestamp of this CreateTransferResponse.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this CreateTransferResponse.


        :param timestamp: The timestamp of this CreateTransferResponse.
        :type: datetime
        """
        self._timestamp = timestamp

    @property
    def state(self):
        """
        Gets the state of this CreateTransferResponse.


        :return: The state of this CreateTransferResponse.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this CreateTransferResponse.


        :param state: The state of this CreateTransferResponse.
        :type: str
        """
        self._state = state

    @property
    def counterparty(self):
        """
        Gets the counterparty of this CreateTransferResponse.


        :return: The counterparty of this CreateTransferResponse.
        :rtype: CreateTransferResponseCounterparty
        """
        return self._counterparty

    @counterparty.setter
    def counterparty(self, counterparty):
        """
        Sets the counterparty of this CreateTransferResponse.


        :param counterparty: The counterparty of this CreateTransferResponse.
        :type: CreateTransferResponseCounterparty
        """
        self._counterparty = counterparty

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

