# coding: utf-8

"""
AccessesApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class AccessesApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_transfer_route(self, access_id, request, **kwargs):
        """
        Create send transfer
        Create a send transfer for a payment using the protocol designated for the account.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_transfer_route(access_id, request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_id: Unique id for an accessible account. (required)
        :param CreateTransferRequest request:  (required)
        :param str authorization: Authorization scheme and credentials.
        :return: CreateTransferResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_id', 'request', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_transfer_route" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'access_id' is set
        if ('access_id' not in params) or (params['access_id'] is None):
            raise ValueError("Missing the required parameter `access_id` when calling `create_transfer_route`")
        # verify the required parameter 'request' is set
        if ('request' not in params) or (params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `create_transfer_route`")

        resource_path = '/accesses/{accessId}/transfers'.replace('{format}', 'json')
        path_params = {}
        if 'access_id' in params:
            path_params['accessId'] = params['access_id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateTransferResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_access_route(self, access_id, **kwargs):
        """
        Get access
        Get an accessible client and account.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_access_route(access_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_id: Unique id for an accessible account. (required)
        :param str authorization: Authorization scheme and credentials.
        :return: GetAccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_id', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_access_route" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'access_id' is set
        if ('access_id' not in params) or (params['access_id'] is None):
            raise ValueError("Missing the required parameter `access_id` when calling `get_access_route`")

        resource_path = '/accesses/{accessId}'.replace('{format}', 'json')
        path_params = {}
        if 'access_id' in params:
            path_params['accessId'] = params['access_id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='GetAccessResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_account_route(self, access_id, **kwargs):
        """
        Get account
        Get an accessible account.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_account_route(access_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_id: Unique id for an accessible account. (required)
        :param str authorization: Authorization scheme and credentials.
        :return: GetAccountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_id', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_route" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'access_id' is set
        if ('access_id' not in params) or (params['access_id'] is None):
            raise ValueError("Missing the required parameter `access_id` when calling `get_account_route`")

        resource_path = '/accesses/{accessId}/account'.replace('{format}', 'json')
        path_params = {}
        if 'access_id' in params:
            path_params['accessId'] = params['access_id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='GetAccountResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_client_route(self, access_id, **kwargs):
        """
        Get client
        Get an accessible client.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_client_route(access_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_id: Unique id for an accessible account. (required)
        :param str authorization: Authorization scheme and credentials.
        :return: GetClientResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_id', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_route" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'access_id' is set
        if ('access_id' not in params) or (params['access_id'] is None):
            raise ValueError("Missing the required parameter `access_id` when calling `get_client_route`")

        resource_path = '/accesses/{accessId}/client'.replace('{format}', 'json')
        path_params = {}
        if 'access_id' in params:
            path_params['accessId'] = params['access_id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='GetClientResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_transaction_route(self, access_id, transaction_id, **kwargs):
        """
        Get transaction
        Get transaction by id.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_transaction_route(access_id, transaction_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_id: Unique id for an accessible account. (required)
        :param str transaction_id: Unique id for a credit or debit transaction. (required)
        :param str authorization: Authorization scheme and credentials.
        :return: GetTransactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_id', 'transaction_id', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transaction_route" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'access_id' is set
        if ('access_id' not in params) or (params['access_id'] is None):
            raise ValueError("Missing the required parameter `access_id` when calling `get_transaction_route`")
        # verify the required parameter 'transaction_id' is set
        if ('transaction_id' not in params) or (params['transaction_id'] is None):
            raise ValueError("Missing the required parameter `transaction_id` when calling `get_transaction_route`")

        resource_path = '/accesses/{accessId}/transactions/{transactionId}'.replace('{format}', 'json')
        path_params = {}
        if 'access_id' in params:
            path_params['accessId'] = params['access_id']
        if 'transaction_id' in params:
            path_params['transactionId'] = params['transaction_id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='GetTransactionResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_transactions_route(self, access_id, page_offset, page_limit, **kwargs):
        """
        Get transactions
        Find transactions based on query parameters.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_transactions_route(access_id, page_offset, page_limit, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_id: Unique id for an accessible account. (required)
        :param int page_offset: Offset for the page. The number of rows to skip from the selected sequence. (required)
        :param int page_limit: Limit for the page. The maximum number of rows to take from the selected sequence. (required)
        :param str authorization: Authorization scheme and credentials.
        :return: GetTransactionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_id', 'page_offset', 'page_limit', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transactions_route" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'access_id' is set
        if ('access_id' not in params) or (params['access_id'] is None):
            raise ValueError("Missing the required parameter `access_id` when calling `get_transactions_route`")
        # verify the required parameter 'page_offset' is set
        if ('page_offset' not in params) or (params['page_offset'] is None):
            raise ValueError("Missing the required parameter `page_offset` when calling `get_transactions_route`")
        # verify the required parameter 'page_limit' is set
        if ('page_limit' not in params) or (params['page_limit'] is None):
            raise ValueError("Missing the required parameter `page_limit` when calling `get_transactions_route`")

        resource_path = '/accesses/{accessId}/transactions'.replace('{format}', 'json')
        path_params = {}
        if 'access_id' in params:
            path_params['accessId'] = params['access_id']

        query_params = {}
        if 'page_offset' in params:
            query_params['pageOffset'] = params['page_offset']
        if 'page_limit' in params:
            query_params['pageLimit'] = params['page_limit']

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='GetTransactionsResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_transfer_route(self, access_id, transfer_id, **kwargs):
        """
        Get transfer
        Get transfer by id.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_transfer_route(access_id, transfer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_id: Unique id for an accessible account. (required)
        :param str transfer_id: Unique id for a payment transfer. (required)
        :param str authorization: Authorization scheme and credentials.
        :return: GetTransferResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_id', 'transfer_id', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transfer_route" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'access_id' is set
        if ('access_id' not in params) or (params['access_id'] is None):
            raise ValueError("Missing the required parameter `access_id` when calling `get_transfer_route`")
        # verify the required parameter 'transfer_id' is set
        if ('transfer_id' not in params) or (params['transfer_id'] is None):
            raise ValueError("Missing the required parameter `transfer_id` when calling `get_transfer_route`")

        resource_path = '/accesses/{accessId}/transfers/{transferId}'.replace('{format}', 'json')
        path_params = {}
        if 'access_id' in params:
            path_params['accessId'] = params['access_id']
        if 'transfer_id' in params:
            path_params['transferId'] = params['transfer_id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='GetTransferResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_transfers_route(self, access_id, page_offset, page_limit, **kwargs):
        """
        Get transfers
        Find transfers based on query parameters.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_transfers_route(access_id, page_offset, page_limit, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_id: Unique id for an accessible account. (required)
        :param int page_offset: Offset for the page. The number of rows to skip from the selected sequence. (required)
        :param int page_limit: Limit for the page. The maximum number of rows to take from the selected sequence. (required)
        :param str authorization: Authorization scheme and credentials.
        :return: GetTransfersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_id', 'page_offset', 'page_limit', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transfers_route" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'access_id' is set
        if ('access_id' not in params) or (params['access_id'] is None):
            raise ValueError("Missing the required parameter `access_id` when calling `get_transfers_route`")
        # verify the required parameter 'page_offset' is set
        if ('page_offset' not in params) or (params['page_offset'] is None):
            raise ValueError("Missing the required parameter `page_offset` when calling `get_transfers_route`")
        # verify the required parameter 'page_limit' is set
        if ('page_limit' not in params) or (params['page_limit'] is None):
            raise ValueError("Missing the required parameter `page_limit` when calling `get_transfers_route`")

        resource_path = '/accesses/{accessId}/transfers'.replace('{format}', 'json')
        path_params = {}
        if 'access_id' in params:
            path_params['accessId'] = params['access_id']

        query_params = {}
        if 'page_offset' in params:
            query_params['pageOffset'] = params['page_offset']
        if 'page_limit' in params:
            query_params['pageLimit'] = params['page_limit']

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='GetTransfersResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def verify_access_route(self, access_id, request, **kwargs):
        """
        Verify access
        Verify access for a provider with a verification signature.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.verify_access_route(access_id, request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_id: Unique id for an accessible account. (required)
        :param VerifyAccessRequest request:  (required)
        :param str authorization: Authorization scheme and credentials.
        :return: Function1RequestContextBoxedUnit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_id', 'request', 'authorization']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method verify_access_route" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'access_id' is set
        if ('access_id' not in params) or (params['access_id'] is None):
            raise ValueError("Missing the required parameter `access_id` when calling `verify_access_route`")
        # verify the required parameter 'request' is set
        if ('request' not in params) or (params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `verify_access_route`")

        resource_path = '/accesses/{accessId}/verify'.replace('{format}', 'json')
        path_params = {}
        if 'access_id' in params:
            path_params['accessId'] = params['access_id']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Function1RequestContextBoxedUnit',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
