# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class GetAliasResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        GetAliasResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'provider_code': 'str',
            'member_id': 'str',
            'description': 'str',
            'created': 'datetime'
        }

        self.attribute_map = {
            'provider_code': 'providerCode',
            'member_id': 'memberId',
            'description': 'description',
            'created': 'created'
        }

        self._provider_code = None
        self._member_id = None
        self._description = None
        self._created = None

    @property
    def provider_code(self):
        """
        Gets the provider_code of this GetAliasResponse.


        :return: The provider_code of this GetAliasResponse.
        :rtype: str
        """
        return self._provider_code

    @provider_code.setter
    def provider_code(self, provider_code):
        """
        Sets the provider_code of this GetAliasResponse.


        :param provider_code: The provider_code of this GetAliasResponse.
        :type: str
        """
        self._provider_code = provider_code

    @property
    def member_id(self):
        """
        Gets the member_id of this GetAliasResponse.


        :return: The member_id of this GetAliasResponse.
        :rtype: str
        """
        return self._member_id

    @member_id.setter
    def member_id(self, member_id):
        """
        Sets the member_id of this GetAliasResponse.


        :param member_id: The member_id of this GetAliasResponse.
        :type: str
        """
        self._member_id = member_id

    @property
    def description(self):
        """
        Gets the description of this GetAliasResponse.


        :return: The description of this GetAliasResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this GetAliasResponse.


        :param description: The description of this GetAliasResponse.
        :type: str
        """
        self._description = description

    @property
    def created(self):
        """
        Gets the created of this GetAliasResponse.


        :return: The created of this GetAliasResponse.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this GetAliasResponse.


        :param created: The created of this GetAliasResponse.
        :type: datetime
        """
        self._created = created

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

